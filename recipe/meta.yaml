{% set version = "3.12.0" %}
{% set dev = "" %}
{% set dev_ = "" %}
{% set ver2 = '.'.join(version.split('.')[0:2]) %}
{% set ver2nd = ''.join(version.split('.')[0:2]) %}
{% set ver3nd = ''.join(version.split('.')[0:3]) %}
{% set build_number = 0 %}

# this makes the linter happy
{% set channel_targets = 'conda-forge main' %}

# Sanitize build system env. var tweak parameters
# (passed to the build scripts via script_env).
{% set linkage_nature = os.environ.get('PY_INTERP_LINKAGE_NATURE', '') %}
{% if linkage_nature != '' %}
  {% set linkage_nature = "_" ~ linkage_nature %}
{% endif %}
{% if linkage_nature == 'shared' %}
  {% set linkage_nature_env = 'shared' %}
{% else %}
  {% set linkage_nature_env = 'static' %}
{% endif %}
{% set dbg_abi = "" %}
{% set debug = os.environ.get('PY_INTERP_DEBUG', '') %}
{% if debug != '' and debug != 'no' %}
  {% set py_interp_debug = "yes" %}
  {% set debug = "_dbg" %}
  {% set dbg_abi = "d" %}  # [win]
{% else %}
  {% set py_interp_debug = "no" %}
{% endif %}

package:
  name: nogil
  version: {{ version }}{{ dev }}

source:
  git_url: https://github.com/colesbury/nogil-3.12-final
  # path: /tmp/下载/nogil/

build:
  number: {{ build_number }}

requirements:
  build:
    - git
    - patch  # [not win]
    - m2-patch  # [win]
    - m2-gcc-libs  # [win]

outputs:
  - name: nogil
    script: build_base.sh  # [unix]
    script: build_base.bat  # [win]
    build:
      number: {{ build_number }}
      activate_in_script: true
      # Windows has issues updating python if conda is using files itself.
      # Copy rather than link.
      no_link:
        - DLLs/_ctypes.pyd  # [win]
      ignore_run_exports_from:   # [unix]
        # C++ only installed so CXX is defined for distutils/sysconfig.
        - {{ compiler('cxx') }}  # [unix]
      # Disabled until verified to work correctly
      detect_binary_files_with_prefix: true
      # detect_binary_files_with_prefix: False
      # binary_has_prefix_files:
      #   - lib/libpython{{ ver2 }}.*.1.0
      #   - bin/python{{ ver2 }}  # [linux]
      #   - lib/libpython{{ ver2 }}.a  # [linux]
      #   - lib/libpython{{ ver2 }}.nolto.a  # [linux]
      #   - lib/libpython3.so  # [linux]
      #   - lib/python{{ ver2 }}/lib-dynload/_hashlib.cpython-{{ ver2nd }}-x86_64-linux-gnu.so  # [linux]
      #   - lib/libpython3.dylib  # [osx]
      # match python.org compiler standard
      skip: true  # [win and int(float(vc)) < 14]
      skip_compile_pyc:
        - '*.py'            # [build_platform != target_platform]
      string: {{ dev_ }}h{{ PKG_HASH }}_{{ PKG_BUILDNUM }}{{ linkage_nature }}{{ debug }}_cpython  # ["conda-forge" in (channel_targets or "")]
      string: h{{ PKG_HASH }}_{{ PKG_BUILDNUM }}{{ linkage_nature }}{{ debug }}  # ["conda-forge" not in (channel_targets or "")]
{% if 'conda-forge' in channel_targets %}
      run_exports:
        noarch:
          - python
        weak:
          - python_abi {{ ver2 }}.* *_cp{{ ver2nd }}
{% endif %}
      script_env:
        - PY_INTERP_LINKAGE_NATURE={{ linkage_nature_env }}
        - PY_INTERP_DEBUG={{ py_interp_debug }}
        # Putting these here means they get emitted to build_env_setup.{sh,bat} meaning we can launch IDEs
        # after sourcing or calling that script without examine the contents of conda_build.{sh,bat} for
        # important env. vars.
        - OPENSSL_DIR=%PREFIX%\Library    # [win]
        - SQLITE3_DIR=%PREFIX%\Library    # [win]

{% if 'conda-forge' in channel_targets %}
        - CONDA_FORGE=yes
{% else %}
        - CONDA_FORGE=no
{% endif %}
      missing_dso_whitelist:   # [win]
        - '**/MSVCR71.dll'  # [win]
        - '**/MSVCR80.dll'  # [win]
        # I have no idea why this is not in C:\Windows\System32\downlevel
        - '**/api-ms-win-core-path-l1-1-0.dll'  # [win]
    requirements:
      build:
        - {{ compiler('c') }}
        - {{ compiler('cxx') }}
        - {{ cdt('xorg-x11-proto-devel') }}  # [linux]
        - {{ cdt('libx11-devel') }}  # [linux]
        - make  # [not win]
        - libtool  # [unix]
        - pkg-config  # [not win]
        # configure script looks for llvm-ar for lto
        - llvm-tools  # [osx]
        - ld_impl_{{ target_platform }}  # [linux]
{% if 'conda-forge' in channel_targets %}
        - binutils_impl_{{ target_platform }}  # [linux]
{% endif %}
      host:
        - bzip2
        - sqlite
        - xz
        - zlib
        - openssl
        - readline  # [not win]
        - tk
        - ncurses  # [unix]
        - libffi
        - ld_impl_{{ target_platform }} >=2.36.1  # [linux]
        - libnsl  # [linux]
        - libuuid  # [linux]
        - libxcrypt  # [linux]
      run:
        - ld_impl_{{ target_platform }} >=2.36.1  # [linux]
        - tzdata
{% if 'conda-forge' in channel_targets %}
      run_constrained:
        - python_abi {{ ver2 }}.* *_cp{{ ver2nd }}
{% endif %}
    test:
      downstreams:
        # Temporarily disable dowmstream tests on aarch64 as the solver causes timeouts on drone
        - cython  # [not aarch64]
        - setuptools  # [not aarch64]
      requires:
        - ripgrep
        - cmake
        - ninja
        - {{ compiler('c') }}
        # Tried to use enable_language(C) to avoid needing this. It does not work.
        - {{ compiler('cxx') }}
      files:
        - tests/distutils/*
        - tests/cmake/*
        - tests/cython/*
        - tests/prefix-replacement/*
        - run_test.py
      commands:
        - echo on  # [win]
        - set  # [win]
        - python -V
        - python3 -V            # [not win]
        - 2to3 -h
        - pydoc -h
        

about:
  home: https://github.com/colesbury/nogil-3.12-final
  license: Python-2.0
  license_file: LICENSE
  summary: Multithreaded Python without the GIL
  description: |
    PThis is a proof-of-concept implementation of CPython that supports multithreading without the global interpreter lock (GIL). 
